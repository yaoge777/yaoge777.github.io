"use strict";(self["webpackChunkblog_vue3"]=self["webpackChunkblog_vue3"]||[]).push([[824],{7627:function(e,n,t){t.d(n,{A:function(){return o}});var i=t(2594);const o=(0,i.Q_)("counter",{state:()=>({isArticle:!0,sideShow:!0,buttonShow:!0,titles:[{id:"",title:""}]}),actions:{},getters:{}})},8497:function(e,n,t){t.d(n,{Z:function(){return d}});var i=t(3396),o=t(7178);const l={class:"container"},s=["id"];var r=(0,i.aZ)({__name:"CodeModel",props:{num:String},setup(e){const n=e,t=()=>{const e=document.querySelector(`#${n.num}`);navigator.clipboard.writeText(e.textContent),(0,o.z8)({message:"复制成功！",type:"success"})};return(e,o)=>{const r=(0,i.up)("el-button");return(0,i.wg)(),(0,i.iD)("div",l,[(0,i.Wm)(r,{type:"primary",class:"copy-button",onClick:t},{default:(0,i.w5)((()=>[(0,i.Uk)("复制代码")])),_:1}),(0,i._)("code",{id:n.num},[(0,i.WI)(e.$slots,"default")],8,s)])}}}),p=t(89);const u=(0,p.Z)(r,[["__scopeId","data-v-3e52158c"]]);var d=u},8824:function(e,n,t){t.r(n),t.d(n,{default:function(){return I}});var i=t(3396),o=t(8497),l=t(7627);const s=e=>((0,i.dD)("data-v-5dc63a09"),e=e(),(0,i.Cn)(),e),r={class:"container"},p={style:{width:"90%"}},u=s((()=>(0,i._)("h1",null,"Vue组件通讯: v-model",-1))),d=s((()=>(0,i._)("p",null,"Vue3提供了多种组件通讯方式，今天我们来看其中的v-model方法",-1))),m=s((()=>(0,i._)("h2",{id:"vue1"},"#父组件写法",-1))),a=s((()=>(0,i._)("p",null,"我们先创建一个响应式变量，然后通过v-model将其传递给子组件",-1))),c=s((()=>(0,i._)("pre",null,"\n          \n            <template>\n              <div>\n                <h2>Parent Component</h2>\n                <ChildComponent v-model=\"message\" />\n                <p>Parent Component Message: {{ message }}</p>\n              </div>\n            </template>\n\n            <script setup>\n              import ChildComponent from './ChildComponent.vue';\n              import { ref } from 'vue';\n              const message = ref('');\n            <\/script>\n\n          ",-1))),v=s((()=>(0,i._)("h2",{id:"vue2"},"#子组件写法",-1))),f=s((()=>(0,i._)("p",null,"在子组件中，我们通过defineProps接受父组件传递过来的变量。 注意defineProps里变量的名称一定要写成modelValues，这个是固定用法。 如果在子组件中想要改变这个值并传回给父组件，我们可以使用defineEmits， 注意，defineEmits里变量名一定要写成update: modelValue，这个也是固定用法。",-1))),_=s((()=>(0,i._)("pre",null,'          \n          <template>\n            <div>\n              <h3>Child Component</h3>\n              <input type="text" v-model="modelValue" />\n              <p>Child Component Value: {{ modelValue }}</p>\n            </div>\n          </template>\n\n          <script setup lang="ts">\n            import { defineProps, defineEmits } from \'vue\';\n\n            interface Props {\n              modelValue: string;\n            }\n\n            interface Emits {\n              \'update:modelValue\': (value: string) => void;\n            }\n\n            const props = defineProps<Props>();\n            const emit = defineEmits<Emits>();\n\n          <\/script>\n\n        ',-1))),C=s((()=>(0,i._)("p",null,"这样一来我们就实现了一个最基础的v-model组件通讯。",-1))),h=s((()=>(0,i._)("h2",{id:"vue3"},"#v-model的参数",-1))),g=s((()=>(0,i._)("p",null,"上面说的，v-model默认使用modelValue作为参数。我们可以使用以下写法更改变量名称",-1))),P=s((()=>(0,i._)("pre",null,'\n          <ChildComponent v-model:title="message" />\n\n        ',-1))),V=s((()=>(0,i._)("p",null,"对应的子组件的写法则要改成",-1))),w=s((()=>(0,i._)("pre",null,"\n          interface Props {\n            title: string;\n          }\n\n          interface Emits {\n            'update: title ': (value: string) => void;\n          }\n\n          const props = defineProps<Props>();\n          const emit = defineEmits<Emits>();\n\n        ",-1))),E=s((()=>(0,i._)("h2",{id:"vue4"},"#自定义修饰符",-1))),Z=s((()=>(0,i._)("p",null,"v-model提供了.trim, .number, .lazy等内置修饰符。除此之外我们还可以自定义修饰符， 接下来我们来定义一个让字符串reverse的修饰符",-1))),b=s((()=>(0,i._)("pre",null,"\n        <template>\n          <div>\n            <h2>Parent Component</h2>\n            <ChildComponent v-model:title.reverse=\"message\" />\n            <p>Parent Component Message: {{ message }}</p>\n          </div>\n        </template>\n\n        <script setup>\n          import ChildComponent from './ChildComponent.vue';\n          import { ref } from 'vue';\n\n          const message = ref('');\n\n          <\/script>\n\n\n        ",-1))),y=s((()=>(0,i._)("pre",null,'          \n          <template>\n            <div>\n              <h3>Child Component</h3>\n              <input type="text" v-model="modelValue" @input="updateTitle"/>\n              <p>Child Component Value: {{ modelValue}}</p>\n            </div>\n          </template>\n\n          <script setup lang="ts">\n            import { defineProps, defineEmits } from \'vue\';\n\n            interface Props {\n              title: string;\n              titleModifier?: { \n                reverse :boolean\n              }\n            }\n\n            interface Emits {\n              \'update:titleValue\': (value: string) => void;\n            }\n\n            const props = defineProps<Props>();\n            const emit = defineEmits<Emits>();\n            const updateTitle = (e:Event) => {\n            const target = e.target as HTMLInputElement\n            const v = target.value\n\n            if(props.titleModifiers?.reverse){\n              const reversed = v.split().reverse().join("")\n              emit("update: titleValue ", reversed)\n            }\n            else{\n              emit("update: titleValue ", v)\n            }\n\n            }\n          <\/script>\n\n        ',-1))),W=s((()=>(0,i._)("p",null,"以上代码中我们在props里新增加了 titleModifier属性，这也是一个固定写法",-1)));var M=(0,i.aZ)({__name:"VueOne",setup(e){const n=(0,l.A)(),t=[{id:"vue1",title:"父组件写法"},{id:"vue2",title:"子组件写法"},{id:"vue3",title:"v-model的参数"},{id:"vue4",title:"自定义修饰符"}];return n.titles=t,(e,n)=>((0,i.wg)(),(0,i.iD)("div",r,[(0,i._)("div",p,[u,d,m,a,(0,i.Wm)(o.Z,{num:"cm1"},{default:(0,i.w5)((()=>[c])),_:1}),v,f,(0,i.Wm)(o.Z,{num:"cm2"},{default:(0,i.w5)((()=>[_])),_:1}),C,h,g,(0,i.Wm)(o.Z,{num:"cm3"},{default:(0,i.w5)((()=>[P])),_:1}),V,(0,i.Wm)(o.Z,{num:"cm4"},{default:(0,i.w5)((()=>[w])),_:1}),E,Z,(0,i.Wm)(o.Z,{num:"cm5"},{default:(0,i.w5)((()=>[b])),_:1}),(0,i.Wm)(o.Z,{num:"cm6"},{default:(0,i.w5)((()=>[y])),_:1}),W])]))}}),k=t(89);const x=(0,k.Z)(M,[["__scopeId","data-v-5dc63a09"]]);var I=x}}]);
//# sourceMappingURL=824.83aa6dac.js.map