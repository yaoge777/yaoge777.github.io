{"version":3,"file":"js/73.7c5da0e8.js","mappings":"kQAGA,MAAMA,EAAeC,KAAMC,EAAAA,EAAAA,IAAa,mBAAmBD,EAAEA,KAAIE,EAAAA,EAAAA,MAAcF,GACzEG,EAAa,CAAEC,MAAO,aACtBC,EAAa,CAAEC,MAAO,CAAC,MAAQ,QAC/BC,GAA0BC,EAAAA,EAAAA,IAAmB,qrBAA4rB,GACzuBC,EAA4BV,GAAa,KAAmBW,EAAAA,EAAAA,GAAoB,MAAO,CAC3FN,MAAO,OACPE,MAAO,CAAC,MAAQ,SACf,EACYK,EAAAA,EAAAA,IAAiB,aACjBD,EAAAA,EAAAA,GAAoB,OAAQ,CACvCE,GAAI,MACJR,MAAO,4BACN,wPACUO,EAAAA,EAAAA,IAAiB,cAC5B,KACEE,GAA2BL,EAAAA,EAAAA,IAAmB,s5BAAy5B,IAO78B,OAA4BM,EAAAA,EAAAA,IAAiB,CAC3CC,OAAQ,QACRC,MAAMC,GAERC,IAAAA,eACA,MAAMC,GAAWC,EAAAA,EAAAA,KACXC,EAAqB,CACnB,CACET,GAAG,MACHU,MAAM,cAGR,CACEV,GAAG,MACHU,MAAM,YAER,CACEV,GAAG,MACHU,MAAM,QAER,CACEV,GAAG,MACHU,MAAM,OAWhB,OAPAH,EAASE,OAASA,EAOX,CAACE,EAAUC,MACRC,EAAAA,EAAAA,OAAcC,EAAAA,EAAAA,IAAoB,MAAOvB,EAAY,EAC3DO,EAAAA,EAAAA,GAAoB,MAAOL,EAAY,CACrCE,GACAoB,EAAAA,EAAAA,IAAaC,EAAAA,EAAW,CAAEC,IAAK,OAAS,CACtCC,SAASC,EAAAA,EAAAA,KAAS,IAAM,CACtBtB,KAEFuB,EAAG,IAELnB,MAIN,I,QClEA,MAAMoB,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O","sources":["webpack://blog-vue3/./src/views/articles/JsOne.vue?5b29","webpack://blog-vue3/./src/views/articles/JsOne.vue"],"sourcesContent":["import { defineComponent as _defineComponent } from 'vue'\nimport { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, withCtx as _withCtx, createVNode as _createVNode, createStaticVNode as _createStaticVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-f3d384d4\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { class: \"container\" }\nconst _hoisted_2 = { style: {\"width\":\"80%\"} }\nconst _hoisted_3 = /*#__PURE__*/_createStaticVNode(\"<h1 data-v-f3d384d4>Javascript异步加载</h1><h2 id=\\\"js1\\\" data-v-f3d384d4>#为什么要使用异步加载</h2><p data-v-f3d384d4>我们在打开网页的时候，里面的文件内容有时会十分丰富，加载的时候可能要花费很多时间。我们要知道一个很重要的点，<span data-v-f3d384d4>js是一门单线程语言</span>。也就是说，如果一个特别大的任务阻塞了队列， 整个页面都会进入卡死状态。而这些问题的一个解决方法就是使用异步加载。</p><h2 id=\\\"js2\\\" data-v-f3d384d4>#异步机制如何实现</h2><p data-v-f3d384d4>要实现异步机制，我们需要维护两个队列。<span data-v-f3d384d4>执行栈和后台线程</span>。</p><p data-v-f3d384d4>a.执行栈是一种主线程用来提取和执行同步任务时的数据结构。</p><p data-v-f3d384d4>b.主线程在遇到异步任务时，会先将异步任务推入后台线程。在执行栈中的任务完成后再从后台线程提取任务。而后台线程又可以细分成微队列和宏队列。微队列包括Promise, process.nextTick()等任务， 而宏队列的常见任务包括setTimeout，setInterval等。特别注意执行顺序为优先微队列，其次再是宏队列。</p><h2 id=\\\"js3\\\" data-v-f3d384d4>#代码举例</h2><p data-v-f3d384d4>我们先来看以下代码</p>\", 9)\nconst _hoisted_12 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"pre\", {\n  class: \"code\",\n  style: {\"width\":\"100%\"}\n}, [\n  /*#__PURE__*/_createTextVNode(\"        \"),\n  /*#__PURE__*/_createElementVNode(\"code\", {\n    id: \"cm1\",\n    class: \"language-js line-numbers\"\n  }, \"\\n          console.log('1');\\n\\n          setTimeout(() => {\\n            console.log('2');\\n          }, 0);\\n\\n          Promise.resolve().then(() => {\\n            console.log('3');\\n          });\\n\\n          console.log('4');\\n\\n        \"),\n  /*#__PURE__*/_createTextVNode(\"\\n      \")\n], -1))\nconst _hoisted_13 = /*#__PURE__*/_createStaticVNode(\"<p data-v-f3d384d4>打印的结果为1，4，3，2</p><p data-v-f3d384d4> 解释：</p><p data-v-f3d384d4>1.第一个 console.log(&#39;1&#39;) 在同步环境下执行，并将 1 打印到控制台。</p><p data-v-f3d384d4>2.setTimeout 函数被调用，将回调函数作为宏任务在最小延迟时间（0 毫秒）后执行。它不会立即执行。</p><p data-v-f3d384d4>3.Promise.resolve().then() 创建一个新的 Promise，并立即解析。then() 中的回调函数被添加到微任务队列中。</p><p data-v-f3d384d4>4.第二个 console.log(&#39;4&#39;) 在同步环境下执行，并将 4 打印到控制台。</p><p data-v-f3d384d4>5.此时，调用栈为空，JavaScript 检查微任务队列。</p><p data-v-f3d384d4>6.来自 Promise 的 then() 的回调函数被执行，并将 3 打印到控制台。</p><p data-v-f3d384d4>7.在微任务队列为空之后，JavaScript 检查宏任务队列。</p><p data-v-f3d384d4>8. setTimeout 的回调函数被执行，并将 2 打印到控制台。</p><h2 id=\\\"js4\\\" data-v-f3d384d4>#总结</h2><p data-v-f3d384d4>Js时间循环（event loop）的顺序为</p><p data-v-f3d384d4>1.执行栈处理同步任务。</p><p data-v-f3d384d4>2.当执行栈为空时，JavaScript 检查微任务队列并执行所有排队的微任务。</p><p data-v-f3d384d4>3.在微任务队列为空之后，JavaScript 检查宏任务队列，并执行队列中的下一个任务。</p><p data-v-f3d384d4>4.这个过程不断重复：执行栈、微任务队列、宏任务队列。</p>\", 16)\n\nimport CodeModel from '@/components/CodeModel.vue'\nimport Prism from \"prismjs\";\nimport {titleData} from '@/data/menuData'\nimport {useCounterStore} from '@/store/index'\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'JsOne',\n  setup(__props) {\n\nPrism.highlightAll()\nconst useStore = useCounterStore()\nconst titles:titleData[] = [\n        {\n          id:'js1',\n          title:'为什么要使用异步加载'\n        },\n\n        {\n          id:'js2',\n          title:'异步机制如何实现'\n        },\n        {\n          id:'js3',\n          title:'代码举例'\n        },\n        {\n          id:'js4',\n          title:'总结'\n        },\n      ]        \n\nuseStore.titles = titles\n\n\n\n\n\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createElementVNode(\"div\", _hoisted_2, [\n      _hoisted_3,\n      _createVNode(CodeModel, { num: \"cm1\" }, {\n        default: _withCtx(() => [\n          _hoisted_12\n        ]),\n        _: 1\n      }),\n      _hoisted_13\n    ])\n  ]))\n}\n}\n\n})","import script from \"./JsOne.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./JsOne.vue?vue&type=script&setup=true&lang=ts\"\n\nimport \"./JsOne.vue?vue&type=style&index=0&id=f3d384d4&lang=less&scoped=true\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-f3d384d4\"]])\n\nexport default __exports__"],"names":["_withScopeId","n","_pushScopeId","_popScopeId","_hoisted_1","class","_hoisted_2","style","_hoisted_3","_createStaticVNode","_hoisted_12","_createElementVNode","_createTextVNode","id","_hoisted_13","_defineComponent","__name","setup","__props","Prism","useStore","useCounterStore","titles","title","_ctx","_cache","_openBlock","_createElementBlock","_createVNode","CodeModel","num","default","_withCtx","_","__exports__"],"sourceRoot":""}