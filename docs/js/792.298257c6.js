"use strict";(self["webpackChunkblog_vue3"]=self["webpackChunkblog_vue3"]||[]).push([[792],{9250:function(e,n,t){t.r(n),t.d(n,{default:function(){return x}});var l=t(3396),s=t(563),i=t(378),o=t.n(i),d=(t(1651),t(7474),t(2265),t(4610),t(6442),t(8817),t(7627));const m=e=>((0,l.dD)("data-v-51c8f1e0"),e=e(),(0,l.Cn)(),e),p={class:"container"},a={style:{width:"80%"}},r=m((()=>(0,l._)("h1",null,"Vue组件通讯: v-model",-1))),u=m((()=>(0,l._)("p",null,"Vue3提供了多种组件通讯方式，今天我们来看其中的v-model方法",-1))),c=m((()=>(0,l._)("h2",{id:"vue1"},"#父组件写法",-1))),v=m((()=>(0,l._)("p",null,"我们先创建一个响应式变量，然后通过v-model将其传递给子组件",-1))),f=m((()=>(0,l._)("pre",{class:"code",style:{width:"100%"}},[(0,l.Uk)("        "),(0,l._)("code",{id:"cm1",class:"language-js line-numbers"},"\n          \n            <template>\n              <div>\n                <h2>Parent Component</h2>\n                <ChildComponent v-model=\"message\" />\n                <p>Parent Component Message: {{ message }}</p>\n              </div>\n            </template>\n\n            <script setup>\n              import ChildComponent from './ChildComponent.vue';\n              import { ref } from 'vue';\n              const message = ref('');\n            <\/script>\n\n        "),(0,l.Uk)("\n      ")],-1))),_=m((()=>(0,l._)("h2",{id:"vue2"},"#子组件写法",-1))),g=m((()=>(0,l._)("p",null,"在子组件中，我们通过defineProps接受父组件传递过来的变量。 注意defineProps里变量的名称一定要写成modelValues，这个是固定用法。 如果在子组件中想要改变这个值并传回给父组件，我们可以使用defineEmits， 注意，defineEmits里变量名一定要写成update: modelValue，这个也是固定用法。",-1))),h=m((()=>(0,l._)("pre",{class:"code",style:{width:"100%"}},[(0,l.Uk)("        "),(0,l._)("code",{id:"cm2",class:"language-ts line-numbers"},'\n          \n          <template>\n            <div>\n              <h3>Child Component</h3>\n              <input type="text" v-model="modelValue" />\n              <p>Child Component Value: {{ modelValue }}</p>\n            </div>\n          </template>\n\n          <script setup lang="ts">\n            import { defineProps, defineEmits } from \'vue\';\n\n            interface Props {\n              modelValue: string;\n            }\n\n            interface Emits {\n              \'update:modelValue\': (value: string) => void;\n            }\n\n            const props = defineProps<Props>();\n            const emit = defineEmits<Emits>();\n\n          <\/script>\n        '),(0,l.Uk)("\n      ")],-1))),C=m((()=>(0,l._)("p",null,"这样一来我们就实现了一个最基础的v-model组件通讯。",-1))),k=m((()=>(0,l._)("h2",{id:"vue3"},"#v-model的参数",-1))),P=m((()=>(0,l._)("p",null,"上面说的，v-model默认使用modelValue作为参数。我们可以使用以下写法更改变量名称",-1))),V=m((()=>(0,l._)("pre",{class:"code",style:{width:"100%"}},[(0,l.Uk)("        "),(0,l._)("code",{id:"cm3",class:"language-markup line-numbers"},'\n          <ChildComponent v-model:title="message" />\n        '),(0,l.Uk)("\n      ")],-1))),w=m((()=>(0,l._)("p",null,"对应的子组件的写法则要改成",-1))),E=m((()=>(0,l._)("pre",{class:"code",style:{width:"100%"}},[(0,l.Uk)("        "),(0,l._)("code",{id:"cm4",class:"language-ts line-numbers"},"\n          interface Props {\n            title: string;\n          }\n\n          interface Emits {\n            'update: title ': (value: string) => void;\n          }\n\n          const props = defineProps<Props>();\n          const emit = defineEmits<Emits>();\n\n        "),(0,l.Uk)("\n      ")],-1))),b=m((()=>(0,l._)("h2",{id:"vue4"},"#自定义修饰符",-1))),U=m((()=>(0,l._)("p",null,"v-model提供了.trim, .number, .lazy等内置修饰符。除此之外我们还可以自定义修饰符， 接下来我们来定义一个让字符串reverse的修饰符",-1))),y=m((()=>(0,l._)("pre",{class:"code",style:{width:"100%"}},[(0,l.Uk)("      "),(0,l._)("code",{id:"cm5",class:"language-ts line-numbers"},"\n        <template>\n          <div>\n            <h2>Parent Component</h2>\n            <ChildComponent v-model:title.reverse=\"message\" />\n            <p>Parent Component Message: {{ message }}</p>\n          </div>\n        </template>\n\n        <script setup>\n          import ChildComponent from './ChildComponent.vue';\n          import { ref } from 'vue';\n\n          const message = ref('');\n\n          <\/script>\n\n        "),(0,l.Uk)("\n      ")],-1))),Z=m((()=>(0,l._)("pre",{class:"code",style:{width:"100%"}},[(0,l.Uk)("        "),(0,l._)("code",{id:"cm6",class:"language-ts line-numbers"},'\n          \n          <template>\n            <div>\n              <h3>Child Component</h3>\n              <input type="text" v-model="modelValue" @input="updateTitle"/>\n              <p>Child Component Value: {{ modelValue}}</p>\n            </div>\n          </template>\n\n          <script setup lang="ts">\n            import { defineProps, defineEmits } from \'vue\';\n\n            interface Props {\n              title: string;\n              titleModifier?: { \n                reverse :boolean\n              }\n            }\n\n            interface Emits {\n              \'update:titleValue\': (value: string) => void;\n            }\n\n            const props = defineProps<Props>();\n            const emit = defineEmits<Emits>();\n            const updateTitle = (e:Event) => {\n            const target = e.target as HTMLInputElement\n            const v = target.value\n\n            if(props.titleModifiers?.reverse){\n              const reversed = v.split().reverse().join("")\n              emit("update: titleValue ", reversed)\n            }\n            else{\n              emit("update: titleValue ", v)\n            }\n\n            }\n          <\/script>\n        '),(0,l.Uk)("\n      ")],-1))),M=m((()=>(0,l._)("p",null,"以上代码中我们在props里新增加了 titleModifier属性，这也是一个固定写法",-1)));var W=(0,l.aZ)({__name:"VueOne",setup(e){o().highlightAll();const n=(0,d.A)(),t=[{id:"vue1",title:"父组件写法"},{id:"vue2",title:"子组件写法"},{id:"vue3",title:"v-model的参数"},{id:"vue4",title:"自定义修饰符"}];return n.titles=t,(e,n)=>((0,l.wg)(),(0,l.iD)("div",p,[(0,l._)("div",a,[r,u,c,v,(0,l.Wm)(s.Z,{num:"cm1"},{default:(0,l.w5)((()=>[f])),_:1}),_,g,(0,l.Wm)(s.Z,{num:"cm2"},{default:(0,l.w5)((()=>[h])),_:1}),C,k,P,(0,l.Wm)(s.Z,{num:"cm3"},{default:(0,l.w5)((()=>[V])),_:1}),w,(0,l.Wm)(s.Z,{num:"cm4"},{default:(0,l.w5)((()=>[E])),_:1}),b,U,(0,l.Wm)(s.Z,{num:"cm5"},{default:(0,l.w5)((()=>[y])),_:1}),(0,l.Wm)(s.Z,{num:"cm6"},{default:(0,l.w5)((()=>[Z])),_:1}),M])]))}}),T=t(89);const j=(0,T.Z)(W,[["__scopeId","data-v-51c8f1e0"]]);var x=j}}]);
//# sourceMappingURL=792.298257c6.js.map